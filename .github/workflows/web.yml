name: Web

on:
  push:
    # Inputs the workflow accepts.
    branches: [ "main" ]

jobs:
  Pre-Build:
    # The type of runner that the job will run on
    runs-on: windows-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    outputs:
      output1: "frog"
      output2: "even cooler frog"
    env:
      WORKFLOW_NAME: ${{ github.workflow }}
      RUN_NUMBER: ${{ github.run_number }}
      RUN_ATTEMPT: ${{ github.run_attempt }}
      GITHUB_WORKSPACE: ${{ github.workspace }}
    steps:
    # Runs a single command using the runners shell
    - name: Create directory
      shell: pwsh
      run: |
        Write-Output "Running $env:WORKFLOW_NAME"
        Write-Output "Build Number $env:RUN_NUMBER"
        Write-Output "Run Attempt(s): $env:RUN_ATTEMPT"
        Write-Output "Located at: $env:GITHUB_WORKSPACE"
        Get-ChildItem -Recurse $env:GITHUB_WORKSPACE | Select Fullname
    - name: Copy stuff over to directory
      run: Write-Output "ooh it's prebuilding!"
    - name: Run file
      run: Write-Output "ooh im file!"
      
  Build:
    runs-on: windows-latest
    needs: Pre-Build
    strategy:
      matrix:
        windows-version: [x86, x64]
    steps:
      - name: Get artifacts from pre-build
        env:
          OUTPUT1: ${{ needs.Pre-Build.outputs.output1 }}
          OUTPUT2: ${{ needs.Pre-Build.outputs.output2 }}
        run: Write-Output "are you interested in a $env:OUTPUT1 ? or perhaps, an $env:OUTPUT2 ?"
      - name: Run big command that does a lot of stuff x86
        if: ${{ matrix.windows-version == 'x86' }}
        run: Write-Output "ooh this is x86!"
      - name: Run big command that does a lot of stuff x64
        if: ${{ matrix.windows-version == 'x64' }}
        run: Write-Output "ooh this is x64!"

  Unit-Testing:
    runs-on: windows-latest
    needs: [Pre-Build, Build]
    steps:
      - name: run like a whole bunch of tests
        run: Write-Output "its tests. its a whole lot"

  Deploy:
    runs-on: windows-latest
    needs: [Pre-Build, Build, Unit-Testing]
    steps:
      - name: Part where it deploys
        run: Write-Output "this is that part"
   #   - name: Upload a Build Artifact
  #uses: actions/upload-artifact@v4.6.1
    #with:
      # Artifact name
    #  name: # optional, default is artifact
      # A file, directory or wildcard pattern that describes what to upload
   #   path: 
      # The desired behavior if no files are found using the provided path.
  #Available Options:
  #warn: Output a warning but do not fail the action
  #error: Fail the action with an error message
  #ignore: Do not output any warnings or errors, the action does not fail

 #   if-no-files-found: # optional, default is warn
    # Duration after which artifact will expire in days. 0 means using default retention.
#Minimum 1 day. Maximum 90 days unless changed from the repository settings page.

#    retention-days: # optional
    # The level of compression for Zlib to be applied to the artifact archive. The value can range from 0 to 9: - 0: No compression - 1: Best speed - 6: Default compression (same as GNU Gzip) - 9: Best compression Higher levels will result in better compression, but will take longer to complete. For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads.

  #  compression-level: # optional, default is 6
    # If true, an artifact with a matching name will be deleted before a new one is uploaded. If false, the action will fail if an artifact for the given name already exists. Does not fail if the artifact does not exist.

 #   overwrite: # optional, default is false
    # If true, hidden files will be included in the artifact. If false, hidden files will be excluded from the artifact.

#    include-hidden-files: # optional, default is false
          
